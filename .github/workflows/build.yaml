# This name is referenced in the release.yaml workflow, if you're changing here - change there
name: Build

on:
  push:
    branches:
    - development
    - '[0-9]+.[0-9]+.x'

  workflow_dispatch:
    inputs:
      docker_registries:
        description: 'Comma separated list of docker registries to push images to (default: ghcr.io/, use registry.hub.docker.com/ for docker hub)'
        required: true
        default: 'ghcr.io/'
      docker_repo:
        description: 'Docker repo to push images to (default: lowercase github repository owner name)'
        required: false
        default: ''
      version:
        description: 'The version to build, without prefix v (e.g. 1.1.0), if not provided version will be <latest-release>-<commit-hash>'
        required: false
        default: ''
      skip_images:
        description: 'Comma separated list of images to skip building, example with all possible images: mlrun,api,base,models,models-gpu,jupyter,test'
        required: false
        default: ''
      pull_latest_security_fixes:
        description: 'Whether to force cache misses and get the most recent security updates, the default is no because doing so significantly increases build time (set any character to force this action)'
        required: false
        default: ''
jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          skipImages=,${{ github.event.inputs.skip_images }},
          matrix=$(jq --arg skipImages "$skipImages" 'map(. | select(",\(."image-name")," | inside($skipImages)|not))' ./.github/workflows/build-workflow-matrix.json)
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}
  build-images:
    name: Build and push image - ${{ matrix.image-name }}
    runs-on: ubuntu-latest
    needs: matrix_prep

    # let's not run this on every fork, change to your fork when developing
    if: github.repository == 'mlrun/mlrun' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    steps:
    - uses: actions/checkout@v2
    - name: Install curl and jq
      run: sudo apt-get install curl jq
    - name: Extract git hash, ref and latest version
      id: git_info
      run: |
        echo "::set-output name=mlrun_commit_hash::$(git rev-parse --short=8 $GITHUB_SHA)"
        echo "::set-output name=latest_version::$(curl -sf https://pypi.org/pypi/mlrun/json | jq -r '.info.version')"
    - name: Resolve docker cache tag
      id: docker_cache
      run: |
        export version_suffix=$(echo "$GITHUB_REF_NAME" | grep -E "^[0-9]+\.[0-9]+\.x$" | tr -d '.');
        export unstable_tag=$(if [ -z "$version_suffix" ]; then echo "unstable-cache"; else echo "unstable-cache-$version_suffix";fi);
        echo "::set-output name=tag::$(echo $unstable_tag)"
    - name: Set computed versions params
      id: computed_params
      run: |
        echo "::set-output name=mlrun_version::$( \
          input_mlrun_version=${{ github.event.inputs.version }} && \
          default_mlrun_version=$(echo ${{ steps.git_info.outputs.latest_version }}+${{ steps.git_info.outputs.mlrun_commit_hash }}) && \
          echo ${input_mlrun_version:-`echo $default_mlrun_version`})"
        echo "::set-output name=mlrun_docker_repo::$( \
          input_docker_repo=${{ github.event.inputs.docker_repo }} && \
          default_docker_repo=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') && \
          echo ${input_docker_repo:-`echo $default_docker_repo`})"
        echo "::set-output name=mlrun_docker_registries::$( \
          input_docker_registries=${{ github.event.inputs.docker_registries }} && \
          echo ${input_docker_registries:-ghcr.io/})"
        echo "::set-output name=mlrun_cache_date::$(date +%s)"
    - name: Docker login
      # all suffixed with "| true" to allow failures if secrets are not defined (fork)
      run: |
        echo ${{ secrets.GHCR_DOCKER_REGISTRY_PASSWORD }} | \
          docker login ghcr.io -u ${{ secrets.GHCR_DOCKER_REGISTRY_USERNAME }} --password-stdin | true
        echo ${{ secrets.DOCKER_HUB_DOCKER_REGISTRY_PASSWORD }} | \
          docker login registry.hub.docker.com -u ${{ secrets.DOCKER_HUB_DOCKER_REGISTRY_USERNAME }} \
          --password-stdin | true
        echo ${{ secrets.QUAY_IO_DOCKER_REGISTRY_PASSWORD }} | \
          docker login quay.io -u ${{ secrets.QUAY_IO_DOCKER_REGISTRY_USERNAME }} \
          --password-stdin | true

    - name: Pull cache, build and push image

      # we don't really want per-commit test image we just want to build and push the cache image so CI will be able
      # to use it and run much faster
      if: ${{ matrix.image-name != 'test' }}
      run: |
        for registry in $(echo ${{ steps.computed_params.outputs.mlrun_docker_registries }} | sed "s/,/ /g"); \
          do \
            MLRUN_CACHE_DATE=${{ steps.computed_params.outputs.mlrun_cache_date }} \
            MLRUN_DOCKER_REGISTRY=$registry \
            MLRUN_DOCKER_CACHE_FROM_REGISTRY=ghcr.io/ \
            MLRUN_DOCKER_REPO=${{ steps.computed_params.outputs.mlrun_docker_repo }} \
            MLRUN_VERSION=${{ steps.computed_params.outputs.mlrun_version }} \
            MLRUN_DOCKER_CACHE_FROM_TAG=${{ steps.docker_cache.outputs.tag }} \
            MLRUN_UPDATE_SECURITY_FIXES=${{ github.event.inputs.pull_latest_security_fixes }} \
            MLRUN_PUSH_DOCKER_CACHE_IMAGE="true" \
            make ${{ matrix.image-name }}; \
          done;
